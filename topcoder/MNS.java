package topcoder;

import java.util.*;

public class MNS {
  int[] a = null;
  boolean[] b = null;
  int c[] = null;
  Set<String> found = new HashSet<String>();

  int total = 0, count =0;
  public int combos(int[] numbers) {
    a = new int[9];
    b = new boolean[9];
    c = new int[10]; // this works only if numbers in [1..9]
    for (int i=0;i<9;i++) c[numbers[i]]++;

//    search(numbers, 0);
    search_alt(0);
    System.out.println("total="+total);
    return count;//found.size();
  }

  public static String join(int[] s, String delimiter) {
      StringBuffer buffer = new StringBuffer();
      for (int i=0;i<s.length;i++) {
          buffer.append(s[i]);
          if (i!=s.length-1) {
              buffer.append(delimiter);
          }
      }
      return buffer.toString();
  }


  void search_alt(int n) {
    if (n == 9) {
      total++;
      if (a[0]+a[1]+a[2]!=a[3]+a[4]+a[5]) return;
      if (a[0]+a[1]+a[2]!=a[6]+a[7]+a[8]) return;
      if (a[0]+a[3]+a[6]!=a[1]+a[4]+a[7]) return;
      if (a[0]+a[3]+a[6]!=a[2]+a[5]+a[8]) return;
      count++;
      return;
    }
    for (int i=0;i<10;i++) {
       if (c[i]>0) {
         c[i]--;
         a[n] = i;
         search_alt(n+1);
         c[i]++;
       }
    }

  }

  void search(final int[] numbers, int n) {
    if (n == 9) {
      total++;
      if (a[0]+a[1]+a[2]!=a[3]+a[4]+a[5]) return;
      if (a[0]+a[1]+a[2]!=a[6]+a[7]+a[8]) return;
      if (a[0]+a[3]+a[6]!=a[1]+a[4]+a[7]) return;
      if (a[0]+a[3]+a[6]!=a[2]+a[5]+a[8]) return;
      found.add(join(a,"#"));
      return;
    }
    for (int i=0;i<9;i++) {
       if (!b[i]) {
         b[i] = true;
         a[n] = numbers[i];
         search(numbers, n+1);
         b[i] = false;
       }
    }
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p0[i]);
    }
    System.out.print("}");
    System.out.println("]");
    MNS obj;
    int answer;
    obj = new MNS();
    long startTime = System.currentTimeMillis();
    answer = obj.combos(p0);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p1);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p1;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int[] p0;
    int p1;

    // ----- test 0 -----
    p0 = new int[]{1, 2, 3, 3, 2, 1, 2, 2, 2};
    p1 = 18;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = new int[]{4, 4, 4, 4, 4, 4, 4, 4, 4};
    p1 = 1;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = new int[]{1, 5, 1, 2, 5, 6, 2, 3, 2};
    p1 = 36;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = new int[]{1, 2, 6, 6, 6, 4, 2, 6, 4};
    p1 = 0;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

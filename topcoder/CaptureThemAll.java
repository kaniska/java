package topcoder;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/**
 * @author jbu
 */
public class CaptureThemAll {


  public int fastKnight(String knight, String rook, String queen) {
    Chess init, target1, target2;

    init = new Chess(knight);
    target1 = new Chess(rook);
    target2 = new Chess(queen);
    init.level = 0;

    System.out.println("init=" + init);
    System.out.println("target1=" + target1);
    System.out.println("target2=" + target2);

    LinkedList<Chess> s = new LinkedList<Chess>();
    s.addFirst(init);

    Chess t;
    while (!s.isEmpty()) {
      t = s.removeLast();

      List<Chess> next = getNextSteps(t);
      for (Chess c : next) {
        if ( (c.containsInPath(target1) && c.containsInPath(target2))) {
          System.out.println("MATCH Found");
          return c.level;
        }
        if (c.level > 6) {
            System.out.println(s );
          return -1;
        }
        s.addFirst(c);
      }
    }
    return -1;
  }

  private int[][] nextP = new int[][]{{-2, -1}, {-2, 1}, {2, -1}, {2, 1}, {-1, -2}, {-1, 2}, {1, -2}, {1, 2}};

  private List<Chess> getNextSteps(Chess t) {
    int x = t.x, y = t.y, l = t.level + 1;
    int nextX, nextY;
    List<Chess> result = new ArrayList<Chess>();
    for (int[] aNextP : nextP) {
      nextX = x + aNextP[0];
      nextY = y + aNextP[1];
      if (isOnBoard(nextX, nextY) && !t.containsInPath(nextX, nextY)) {
        Chess c =  new Chess(nextX, nextY, l);
        c.prev = t;
        result.add(c);
      }
    }
    return result;
  }

  private boolean isOnBoard(int x, int y) {
    return (x >= 1 && x <= 8 && y >= 1 && y <= 8) ;
  }

/*  public static void main(String args[]) {
 CaptureThemAll c = new CaptureThemAll();
 System.out.println(c.fastKnight("a1", "a2", "b2"));
 System.out.println(c.fastKnight("a1", "a2", "b2"));
 System.out.println(c.fastKnight("a1", "a2", "b2"));
 System.out.println(c.fastKnight("a1", "a2", "b2"));
} //*/

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, String p0, String p1, String p2, boolean hasAnswer, int p3) {
    System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "\"" + p1 + "\"" + "," + "\"" + p2 + "\"");
    System.out.println("]");
    CaptureThemAll obj;
    int answer;
    obj = new CaptureThemAll();
    long startTime = System.currentTimeMillis();
    answer = obj.fastKnight(p0, p1, p2);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p3);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p3;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    String p0;
    String p1;
    String p2;
    int p3;

    // ----- test 0 -----
    p0 = "a1";
    p1 = "b3";
    p2 = "c5";
    p3 = 2;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = "b1";
    p1 = "c3";
    p2 = "a3";
    p3 = 3;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------  */

    // ----- test 2 -----
    p0 = "a1";
    p1 = "a2";
    p2 = "b2";
    p3 = 6;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = "a5";
    p1 = "b7";
    p2 = "e4";
    p3 = 3;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = "h8";
    p1 = "e2";
    p2 = "d2";
    p3 = 6;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------                                         */

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}

class Chess {
  public int x, y;
  public int level = -1;
  public Chess prev = null;

  Chess(int x, int y, int level) {
    this.x = x;
    this.y = y;
    this.level = level;
  }

  Chess(String s) {
    this.x = s.charAt(0) - 'a' + 1;
    this.y = s.charAt(1) - '0';
  }

  @Override
  public String toString() {
    final StringBuilder sb = new StringBuilder();
    sb.append("{");
    sb.append((char) ('a' + x - 1)).append((char) ('0' + y)).append("-").append(level);
    sb.append('}');
    return sb.toString();
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    Chess chess = (Chess) o;

    if (x != chess.x) {
      return false;
    }
    if (y != chess.y) {
      return false;
    }

    return true;
  }

  public boolean containsInPath(Chess c) {
    return containsInPath(c.x, c.y);
  }

  public boolean containsInPath(int x, int y) {
    Chess c = this;
    while (c!=null) {
      if (c.x==x && c.y==y) return true;
      c = c.prev;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int result = x;
    result = 31 * result + y;
    return result;
  }
}
package tc;

import java.util.*;


public class SmartWordToy {

  class Word {
    String text;
    int steps;

    Word(String text, int steps) {
      this.text = text;
      this.steps = steps;
    }

    @Override
    public String toString() {
      final StringBuilder sb = new StringBuilder();
      sb.append("\'").append(text).append('\'');
      sb.append("=").append(steps);
      return sb.toString();
    }
  }

  private String[][] forbids = null;

  public int minPresses(String start, String finish, String[] forbid) {
    forbids = new String[forbid.length][4];
    for (int i = 0; i < forbid.length; i++) {
      forbids[i] = forbid[i].split(" ");
    }
    if (isForbid(finish.toCharArray())) return -1;

    HashSet<String> visited = new HashSet<String>();
    visited.add(start);
    Queue<Word> queue = new LinkedList<Word>();
    queue.add(new Word(start, 0));
    while (!queue.isEmpty()) {
      Word p = queue.poll();
//      System.out.println(p);
      char[] s = p.text.toCharArray();
      int steps = p.steps;
      for (int i = 0; i < 8; i++) {
        char[] next = getNext(s, i);
        if (visited.contains(String.valueOf(next))) continue;
        if (String.valueOf(next).equals(finish)) return (steps + 1);
        if (!isForbid(next)) queue.add(new Word(String.valueOf(next), (steps + 1)));
        visited.add(String.valueOf(next));
      }
    }
    return -1;
  }

  int[][] change = new int[][]{{0, 1}, {1, 1}, {2, 1}, {3, 1}, {0, -1}, {1, -1}, {2, -1}, {3, -1}};

  boolean isForbid(char[] n) {
    for (String[] f : forbids) {
      if (f[0].contains(String.valueOf(n[0])) && f[1].contains(String.valueOf(n[1])) && f[2].contains(String.valueOf(n[2])) && f[3].contains(String.valueOf(n[3]))) {
        return true;
      }
    }
    return false;
  }

  char[] getNext(char[] c, int i) {
    char[] r = new char[c.length];
    System.arraycopy(c, 0, r, 0, c.length);
    if (change[i][1] == 1) {
      r[change[i][0]] = r[change[i][0]] == 'z' ? 'a' : (char) (r[change[i][0]] + 1);
    } else {
      r[change[i][0]] = r[change[i][0]] == 'a' ? 'z' : (char) (r[change[i][0]] - 1);
    }
    return r;
  }


  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, String p0, String p1, String[] p2, boolean hasAnswer, int p3) {
    System.out.print("Test " + testNum + ": [" + "\"" + p0 + "\"" + "," + "\"" + p1 + "\"" + "," + "{");
    for (int i = 0; p2.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print("\"" + p2[i] + "\"");
    }
    System.out.print("}");
    System.out.println("]");
    SmartWordToy obj;
    int answer;
    obj = new SmartWordToy();
    long startTime = System.currentTimeMillis();
    answer = obj.minPresses(p0, p1, p2);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p3);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p3;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    String p0;
    String p1;
    String[] p2;
    int p3;

    // ----- test 0 -----
    p0 = "aaaa";
    p1 = "zzzz";
    p2 = new String[]{"a a a z", "a a z a", "a z a a", "z a a a", "a z z z", "z a z z", "z z a z", "z z z a"};
    p3 = 8;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = "aaaa";
    p1 = "bbbb";
    p2 = new String[]{};
    p3 = 4;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = "aaaa";
    p1 = "mmnn";
    p2 = new String[]{};
    p3 = 50;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = "aaaa";
    p1 = "zzzz";
    p2 = new String[]{"bz a a a", "a bz a a", "a a bz a", "a a a bz"};
    p3 = -1;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = "aaaa";
    p1 = "zzzz";
    p2 = new String[]{"cdefghijklmnopqrstuvwxyz a a a", "a cdefghijklmnopqrstuvwxyz a a", "a a cdefghijklmnopqrstuvwxyz a", "a a a cdefghijklmnopqrstuvwxyz"};
    p3 = 6;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 5 -----
    p0 = "aaaa";
    p1 = "bbbb";
    p2 = new String[]{"b b b b"};
    p3 = -1;
    all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
    // ------------------

    // ----- test 6 -----
    p0 = "zzzz";
    p1 = "aaaa";
    p2 = new String[]{"abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefg" +
        "hijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl a" +
        "bcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk", "abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk"};
    p3 = -1;
    all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

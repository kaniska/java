package tc;

import java.util.*;

// ## each row's selection is LIMITED by current row's col num
// ## if already passed last row, count the current special then return;
// ## some special number is larger than 10, so string sort won't work   "10"<"2"

public class WeirdRooks {
  int a[];   // col selected at each row
  boolean b[];  // which col is selected overall
  List<String> l = new ArrayList<String>();  // result

  public String describe(int[] cols) {
    int rows = cols.length;
    a = new int[rows];
    Arrays.fill(a, -1);
    b = new boolean[cols[cols.length - 1]];  // last row has max number of cols

    selectNext(cols, 0);

    Collections.sort(l);
    StringBuilder sb = new StringBuilder();
    boolean first = true;
    for (String s : l) {
      if (!first) {
        sb.append(" ");
      } else {
        first = false;
      }
      sb.append(s.replace(",0", ","));
    }
    return sb.toString();
  }

  void selectNext(final int[] cols, int row) {
    // first select NONE at current row;
/*    for (int d = 0; d < a.length; d++) {
      System.out.print(a[d] + " ");
    }
    System.out.println("row=" + row+ "| special="+); // */
    countSpecial(cols);
    if (row == cols.length) return;
    selectNext(cols, row + 1);
    for (int i = 0; i < b.length && i < cols[row]; i++) {
      if (!b[i]) {
        b[i] = true;
        a[row] = i;
        selectNext(cols, row + 1);
        a[row] = -1;
        b[i] = false;
      }
    }
  }

  String countSpecial(final int[] cols) {
    int num = 0;
    for (int k = 0; k < cols.length; k++)
      for (int i = a[k] + 1; i < cols[k]; i++) {
        int j;
        for (j = k + 1; j < cols.length; j++)
          if (a[j] == i) break;
        if (j == cols.length) {
          num++;
        }
      }
    int rooks = 0;
    for (int c = 0; c < b.length; c++) rooks = b[c] ? rooks + 1 : rooks;
    if (!l.contains(rooks + "," + (num < 10 ? "0" + num : num))) l.add(rooks + "," + (num < 10 ? "0" + num : num));
    return rooks + "," + (num < 10 ? "0" + num : num);
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, String p1) {
    System.out.print("Test " + testNum + ": [" + "{");
    for (int i = 0; p0.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p0[i]);
    }
    System.out.print("}");
    System.out.println("]");
    WeirdRooks obj;
    String answer;
    obj = new WeirdRooks();
    long startTime = System.currentTimeMillis();
    answer = obj.describe(p0);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + "\"" + p1 + "\"");
    }
    System.out.println("Your answer:");
    System.out.println("\t" + "\"" + answer + "\"");
    if (hasAnswer) {
      res = answer.equals(p1);
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int[] p0;
    String p1;

    // ----- test 0 -----
    p0 = new int[]{3, 3, 3};
    p1 = "0,9 1,4 1,5 1,6 1,7 1,8 2,1 2,2 2,3 2,4 2,5 2,6 3,0 3,1 3,2 3,3";
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = new int[]{1, 2, 3};
    p1 = "0,6 1,3 1,4 1,5 2,1 2,2 2,3 3,0";
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = new int[]{1};
    p1 = "0,1 1,0";
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = new int[]{2, 9};
    p1 = "0,11 1,2 1,3 1,4 1,5 1,6 1,7 1,8 1,9 1,10 2,0 2,1 2,2 2,3 2,4 2,5 2,6 2,7 2,8";
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

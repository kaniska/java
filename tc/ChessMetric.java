package tc;

public class ChessMetric {
  int mx[] = {2, 2, -2, -2, 1, 1, -1, -1, 1, 1, 1, 0, 0, -1, -1, -1};
  int my[] = {1, -1, 1, -1, 2, -2, 2, -2, 1, 0, -1, 1, -1, 1, 0, -1};

  public long howMany(int size, int[] start, int[] end, int numMoves) {
    long steps[][][] = new long[size][size][numMoves + 1];
    steps[start[0]][start[1]][0] = 1;
    for (int n = 1; n <= numMoves; n++) {
      for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
          if (steps[i][j][n - 1] > 0) {
            for (int m = 0; m < mx.length; m++) {
              int nx = i + mx[m];
              int ny = j + my[m];
              if (nx < 0 || ny < 0 || nx >= size || ny >= size) continue;
              steps[nx][ny][n] += steps[i][j][n - 1];
            }
          }
        }
      }
    }
    int a = 3;
    return steps[end[0]][end[1]][numMoves];
  }

  // BEGIN KAWIGIEDIT TESTING
  // Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
  private static boolean KawigiEdit_RunTest(int testNum, int p0, int[] p1, int[] p2, int p3, boolean hasAnswer, long p4) {
    System.out.print("Test " + testNum + ": [" + p0 + "," + "{");
    for (int i = 0; p1.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p1[i]);
    }
    System.out.print("}" + "," + "{");
    for (int i = 0; p2.length > i; ++i) {
      if (i > 0) {
        System.out.print(",");
      }
      System.out.print(p2[i]);
    }
    System.out.print("}" + "," + p3);
    System.out.println("]");
    ChessMetric obj;
    long answer;
    obj = new ChessMetric();
    long startTime = System.currentTimeMillis();
    answer = obj.howMany(p0, p1, p2, p3);
    long endTime = System.currentTimeMillis();
    boolean res;
    res = true;
    System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
    if (hasAnswer) {
      System.out.println("Desired answer:");
      System.out.println("\t" + p4);
    }
    System.out.println("Your answer:");
    System.out.println("\t" + answer);
    if (hasAnswer) {
      res = answer == p4;
    }
    if (!res) {
      System.out.println("DOESN'T MATCH!!!!");
    } else if ((endTime - startTime) / 1000.0 >= 2) {
      System.out.println("FAIL the timeout");
      res = false;
    } else if (hasAnswer) {
      System.out.println("Match :-)");
    } else {
      System.out.println("OK, but is it right?");
    }
    System.out.println("");
    return res;
  }

  public static void main(String[] args) {
    boolean all_right;
    all_right = true;

    int p0;
    int[] p1;
    int[] p2;
    int p3;
    long p4;

    // ----- test 0 -----
    p0 = 3;
    p1 = new int[]{0, 0};
    p2 = new int[]{1, 0};
    p3 = 1;
    p4 = 1L;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 1 -----
    p0 = 3;
    p1 = new int[]{0, 0};
    p2 = new int[]{1, 2};
    p3 = 1;
    p4 = 1L;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 2 -----
    p0 = 3;
    p1 = new int[]{0, 0};
    p2 = new int[]{2, 2};
    p3 = 1;
    p4 = 0L;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 3 -----
    p0 = 3;
    p1 = new int[]{0, 0};
    p2 = new int[]{0, 0};
    p3 = 2;
    p4 = 5L;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    // ----- test 4 -----
    p0 = 100;
    p1 = new int[]{0, 0};
    p2 = new int[]{0, 99};
    p3 = 50;
    p4 = 243097320072600L;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
    // ------------------

    if (all_right) {
      System.out.println("You're a stud (at least on the example cases)!");
    } else {
      System.out.println("Some of the test cases had errors.");
    }
  }
  // END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
